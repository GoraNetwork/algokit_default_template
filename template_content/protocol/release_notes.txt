Version 1.0.3
1.) This patch contains a minor bug fix with the vote count calculation when VRFs were calculated to be around 0.5

2.) Smart asserts that help give more clear error messages

Version 1.0.2
1.) Contains a fix to explictly reject transactions where a request is attempted to be proposed on more than 1 contract.
    *An error message in the bad acting transaction will read "invalid App reference <X>" Where <X> is the appID of where the transaction is actually being voted on

Version 1.0.1
1.) Refund edge case where a refund is issued to voters on the edge case of a vote expiring during voting, however these voters are not rewarded with gora.
Just refunded the algo they spent. To help facilitate this we had to make adjustments to the request info box, those needing to integrate the decoding of the
request box should find the new encoding defined in "utils/abi_types.ts" as the "RequestInfoType"

2.) A more explicit error is thrown when a user attempts to vote after a request has already completed, before this would throw an invalid box reference error,
now the custom error of 100004 is thrown.

Version 1.0.0

1.) Vote proposals now make use of boxes, box references need to be added to the vote transaction for both the voters previous vote and current vote.
This change makes it so that voting contracts cannot be DDOSd by parties wishing to disrupt the protocol.
    *The box reference name takes the form of the "vote hash block"
    *the box reference appindex should be the voting app id receiving the vote
    *vote hash block for a new can be easily calculated using the "getVoteHash" function in gora_utils.ts
    *vote hash block for a previous vote can be retrieved by reading the previous vote from the users local state
2.) When opting into the voting contract, the user is expected to pay for a proposal box, this would include a payment transaction to be grouped with the opt-in transaction

3.) Request info is now stored in boxes, box references need to be added to the request transaction
This change allows users to have possibly many similtaneous transactions from the same account
    *The box reference name should take the form of the sha512_256(Concat(<RequesterPublicKey>, <KEY>)), where KEY is a user selected Identifier
    *the box reference appindex should be the main app id of the goracle protocol
    *The request transaction now has a new parameter of "key", this can be any string of bytes chosen by the user.
    *The vote transaction should include a box reference as outlined in the first bulletpoint
        *it is recommended the initial proposer of a vote manually calculate the box name using the "key" argument from the original request transaction and the sender.
        *it is not recommended for the initial proposer to read this box name from the box references defined in the request transaction as a user could make box references not related to the operation goracle protocol. 
        *it is recommended that follow on voters of a vote read the "current_request_info" which now includes the box name you would need for the reference, otherwise you could manually calculate it just like the proposer.
    *When a requester makes a request, the amount needed to pay for the box is deducted from their account algo
        *refund transactions will require users to provide the box reference for the request being refunded in addition to an app arg of the box name
        *When a request completes the box will be deleted and the account algo will be refunded
        *In the case where a request expired and a refund needs to be processed, the box will be retained until a refund is processed.
        It should be warned that this may result in a behavior called "refund creep" which will slowly lock up users account algo if the user
        doesn't manually address these refunds.
        *When a refund has been processed, the box will be deleted and algo will be refunded (along with their eligible refund)

4.) Refund abuse is now mitigated
This needed to be addressed due to the possibility of a bad actor spamming the network with requests with destinations meant to fail, in which
the request would time out and the user would be able to claim refund and continue spamming. The assumption made here is that if requests are proposed
and expire before voting concluded then it could be likely that the destination contract is rejecting the response transaction.
    *refunds for requests that were not even proposed will be 100% refunded.
    *refunds for requests that were proposed will be 10% refunded.

5.) Add permisioned method to change request fee and other protocol parameters
    *added the manager parameter to the init function in the main contract.
    *upon init in the main contract a "manager" account is specified, this account is able to tune various parameters in the protocol such as
        *algo request fee
        *gora request fee
        *manager address
        *refund percentages (for proposed, and unproposed)
        *voting threshold
        *time lock
        *vote refill threshold
        *vote refill amount
    *A few parameters listed here used to be compile time parameters, they were removed as compile time parameters
    *in the future it is expected that the "manager" would become a dapp that is controlled by goracle governance

6.) Requests now are able to pass through references
    *These references are specified in the request transaction, 
        it is expected that vote transactions contain these references in the appropriate reference array of the vote txn,
        this allows consumer applications to specify and make use of references during the goracle response called
    *app_refs are expected to be a list of uint64
    *asset_refs are expected to be a list of uint64
    *account_refs are expected to be a list of byte[32]
    *box_refs are expected to be a list of abi tuples of type (byte[],uint64), where the first entry is the box name, and second entry is the app id
    *Note the additional arguments added to the request transaction, no more than 4 references total can be passed through.
    *ABI Types for Box reference lists are included in utils/abi_types.ts, these should help with decoding these args on the noderunner side.
        *every other type is supposed to be an ABI static array, where:
            *App and Asset references are arrays of uint64 type, to decode, read/decode 8 bytes at a time.
            *Account references are an array of Address type, to decode, read/decode 32 bytes at a time.

7.) Minimum stake is now enforced
    *Is used to make the math workout better, in particular where low stake amounts caused some deviations.
    *this added an additional compile time argument to the main contract


Version 0.2.0

1.) Total Stake tracking now available
    *Allows voting ratios to be based on the amount staked at the time of the request
2.) Added a timeout for when a user stakes/unstakes.

3.) Included a patch needed for node runner to user alternate ABI pathing depending on environment variable "GORACLE_ABI_PATH"
4.) Fixed Assertion conditions for requesting a refund_request.
    *Assertion on specific request status was not being enforced properly doing to an OR condition being a static num without comparision.

5.) Voter rewards are now calculated according to the users stake and not their vote count from VRF
    *This fixed an issue where rewards were inconcsistent between voters that had the same amount of stake
    *It was determined to be more beneficial to reward voters by stake to incentivize participation in voting

6.) Many Global compound fields were refactored to make use of ABI types
    *This was done to simplify readability and maintainability of our contract storage
    *Helper functions were added to assets/helpers/abi_structures.ts to help easily read these abi_structures
        *getLocalVoteHistory
            *gets a users previous vote information on a given contract
        *getGlobalProposalTallys
            *gets a list of the proposals currently in global storage (be aware that this may contain leftover proposals from a previous vote)
        *getGlobalVoteHistory
            *gets a list of the most recent vote history entries on a given contract
    *get_request_info function was renamed to getRequestInfo to properly follow naming conventions

7.) Fixed a bug where voters were allowed to start a new round with an already completed transaction.
8.) cli tool had a bug because it wasn't updated after REQUEST_TIMEOUT was removed

9.) Vote transactions are now leased.
    *This was done to prevent "double voting" on a particular request 
    *Of note, this requires that the first round parameter of the vote transaction be set to the request round
    *Of note, this requires that the last round parameter of the vote transaction be set to the <request round> + <request timeout>
    *If the request has expired, this makes the lease specified above invalid, in this case the voter should choose a valid request to propose,
    The contract will ensure that the old request has actually expired and will then start the round with the new proposal
10.) request round is no longer required to be passed into the vote transaction, it is now read from the request info stored in the main contract.
    *request_round parameter of the vote transaction is removed
11.) Voting contract now does not need REQUEST_TIMEOUT as a compile time parameter
    *wasn't being used, was presumabely redundant to the actively used "TIMELOCK" compile time parameter

12.) TIMELOCK no longer applies when a user initially opts in
13.) Custom error codes are now possible (Thanks Egor!) These are currently being used in the voting contract,
but would likely be useful in future contracts, currently its just being compiled into the voting contract under the function AssertNum
*Note that currently updates to the contracts now break unit tests because we are using AssertNum to report line numbers in pyteal

===================================================================================================
Version 0.1.0

1.) Added 2 new parameters to vote function, vote_count and z_index
    *to calculate vote_count and z_index refer to the function "approxCDF" in gora_utils.ts
2.) Added lookup table to be used for z-score lookup for vote count approximation and validation
3.) Request Refunds now possible through the use of "refund_request" method in the main contract
4.) Request status tracking is now more thorough
    *Includes information such as request_id, voting_contract_id, request_round, request_status
    *Refer to the "get_request_info" function in abi_structures.ts on how to read this field
5.) Voting contract rounds now iterate upon completion of a rounds

===================================================================================================
